spring.application.name=bitly-good

# Application Domain (for generating short URLs)
app.domain=http://localhost:8080

# Cache Configuration
app.cache.url.ttl=3600
app.cache.url.metadata.ttl=86400

# PostgreSQL Datasource
spring.datasource.url=jdbc:postgresql://localhost:5432/bitly
spring.datasource.username=user
spring.datasource.password=password
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

# Redis Configuration
spring.data.redis.host=localhost
spring.data.redis.port=6380
spring.data.redis.password=
spring.data.redis.database=0
# 이걸 왜 2000ms로 설정했는지 모르겠음
spring.data.redis.timeout=2000ms
spring.data.redis.lettuce.pool.max-active=8
spring.data.redis.lettuce.pool.max-idle=8
spring.data.redis.lettuce.pool.min-idle=0

# Actuator Configuration (모니터링)
# Spring Boot Actuator 엔드포인트 노출 설정
# health: 애플리케이션 상태 확인
# info: 애플리케이션 정보
# metrics: JVM, 시스템 메트릭
# prometheus: Prometheus 형식의 메트릭 노출
management.endpoints.web.exposure.include=health,info,metrics,prometheus

# Health 엔드포인트에서 상세 정보 표시 (데이터베이스, Redis 등 연결 상태 포함)
management.endpoint.health.show-details=always

# Prometheus 엔드포인트 접근 제한 없음 (보안상 주의 필요)
management.endpoint.prometheus.access=unrestricted

# Prometheus 메트릭 내보내기 활성화
management.prometheus.metrics.export.enabled=true

# HTTP 요청 응답 시간 히스토그램 생성 (백분위수 계산용)
management.metrics.distribution.percentiles-histogram.http.server.requests=true

# HTTP 요청 응답 시간 SLO 임계값 설정 (50ms, 100ms, 200ms, 300ms, 500ms, 1s, 2s, 5s)
# 이 값들은 Grafana 대시보드에서 응답 시간 분포를 시각화하는데 사용됨
management.metrics.distribution.slo.http.server.requests=50ms,100ms,200ms,300ms,500ms,1s,2s,5s

# JMX Configuration (디버깅 및 모니터링용)
# JMX 포트 설정
management.endpoints.jmx.exposure.include=*
management.server.port=8081
# JMX 원격 접근 활성화
spring.jmx.enabled=true